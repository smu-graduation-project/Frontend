{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"selected\", \"rowId\", \"row\", \"index\", \"style\", \"rowHeight\", \"className\", \"visibleColumns\", \"renderedColumns\", \"containerWidth\", \"firstColumnToRender\", \"lastColumnToRender\", \"cellFocus\", \"cellTabIndex\", \"editRowsState\", \"isLastVisible\", \"onClick\", \"onDoubleClick\", \"onMouseEnter\", \"onMouseLeave\"];\n/* eslint-disable jsx-a11y/click-events-have-key-events */\n\n/* eslint-disable jsx-a11y/interactive-supports-focus */\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/material';\nimport { GridEditModes, GridRowModes, GridCellModes } from '../models/gridEditRowModel';\nimport { useGridApiContext } from '../hooks/utils/useGridApiContext';\nimport { getDataGridUtilityClass, gridClasses } from '../constants/gridClasses';\nimport { useGridRootProps } from '../hooks/utils/useGridRootProps';\nimport { gridColumnsTotalWidthSelector } from '../hooks/features/columns/gridColumnsSelector';\nimport { useGridSelector } from '../hooks/utils/useGridSelector';\nimport { useGridVisibleRows } from '../hooks/utils/useGridVisibleRows';\nimport { findParentElementFromClassName } from '../utils/domUtils';\nimport { GRID_CHECKBOX_SELECTION_COL_DEF } from '../colDef/gridCheckboxSelectionColDef';\nimport { GRID_ACTIONS_COLUMN_TYPE } from '../colDef/gridActionsColDef';\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD } from '../constants/gridDetailPanelToggleField';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    editable,\n    editing,\n    selected,\n    isLastVisible,\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['row', selected && 'selected', editable && 'row--editable', editing && 'row--editing', isLastVisible && 'row--lastVisible']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\n\nconst EmptyCell = _ref => {\n  let {\n    width,\n    height\n  } = _ref;\n\n  if (!width || !height) {\n    return null;\n  }\n\n  const style = {\n    width,\n    height\n  };\n  return /*#__PURE__*/_jsx(\"div\", {\n    className: \"MuiDataGrid-cell\",\n    style: style\n  }); // TODO change to .MuiDataGrid-emptyCell or .MuiDataGrid-rowFiller\n};\n\nfunction GridRow(props) {\n  var _apiRef$current$getRo;\n\n  const {\n    selected,\n    rowId,\n    row,\n    index,\n    style: styleProp,\n    rowHeight,\n    className,\n    visibleColumns,\n    renderedColumns,\n    containerWidth,\n    firstColumnToRender,\n    cellFocus,\n    cellTabIndex,\n    editRowsState,\n    isLastVisible = false,\n    onClick,\n    onDoubleClick,\n    onMouseEnter,\n    onMouseLeave\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const ariaRowIndex = index + 2; // 1 for the header row and 1 as it's 1-based\n\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const currentPage = useGridVisibleRows(apiRef, rootProps);\n  const columnsTotalWidth = useGridSelector(apiRef, gridColumnsTotalWidthSelector);\n  const {\n    hasScrollX,\n    hasScrollY\n  } = (_apiRef$current$getRo = apiRef.current.getRootDimensions()) != null ? _apiRef$current$getRo : {\n    hasScrollX: false,\n    hasScrollY: false\n  };\n  const ownerState = {\n    selected,\n    isLastVisible,\n    classes: rootProps.classes,\n    editing: apiRef.current.getRowMode(rowId) === GridRowModes.Edit,\n    editable: rootProps.editMode === GridEditModes.Row\n  };\n  const classes = useUtilityClasses(ownerState);\n  const publish = React.useCallback((eventName, propHandler) => event => {\n    // Ignore portal\n    // The target is not an element when triggered by a Select inside the cell\n    // See https://github.com/mui/material-ui/issues/10534\n    if (event.target.nodeType === 1 && !event.currentTarget.contains(event.target)) {\n      return;\n    } // The row might have been deleted\n\n\n    if (!apiRef.current.getRow(rowId)) {\n      return;\n    }\n\n    apiRef.current.publishEvent(eventName, apiRef.current.getRowParams(rowId), event);\n\n    if (propHandler) {\n      propHandler(event);\n    }\n  }, [apiRef, rowId]);\n  const publishClick = React.useCallback(event => {\n    const cell = findParentElementFromClassName(event.target, gridClasses.cell);\n    const field = cell == null ? void 0 : cell.getAttribute('data-field'); // Check if the field is available because the cell that fills the empty\n    // space of the row has no field.\n\n    if (field) {\n      // User clicked in the checkbox added by checkboxSelection\n      if (field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n        return;\n      } // User opened a detail panel\n\n\n      if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n        return;\n      } // User reorders a row\n\n\n      if (field === '__reorder__') {\n        return;\n      } // User is editing a cell\n\n\n      if (apiRef.current.getCellMode(rowId, field) === GridCellModes.Edit) {\n        return;\n      } // User clicked a button from the \"actions\" column type\n\n\n      const column = apiRef.current.getColumn(field);\n\n      if (column.type === GRID_ACTIONS_COLUMN_TYPE) {\n        return;\n      }\n    }\n\n    publish('rowClick', onClick)(event);\n  }, [apiRef, onClick, publish, rowId]);\n\n  const style = _extends({}, styleProp, {\n    maxHeight: rowHeight,\n    minHeight: rowHeight\n  });\n\n  const sizes = apiRef.current.unstable_getRowInternalSizes(rowId);\n\n  if (sizes != null && sizes.spacingTop) {\n    const property = rootProps.rowSpacingType === 'border' ? 'borderTopWidth' : 'marginTop';\n    style[property] = sizes.spacingTop;\n  }\n\n  if (sizes != null && sizes.spacingBottom) {\n    const property = rootProps.rowSpacingType === 'border' ? 'borderBottomWidth' : 'marginBottom';\n    style[property] = sizes.spacingBottom;\n  }\n\n  let rowClassName = null;\n\n  if (typeof rootProps.getRowClassName === 'function') {\n    const indexRelativeToCurrentPage = index - currentPage.range.firstRowIndex;\n\n    const rowParams = _extends({}, apiRef.current.getRowParams(rowId), {\n      isFirstVisible: indexRelativeToCurrentPage === 0,\n      isLastVisible: indexRelativeToCurrentPage === currentPage.rows.length - 1,\n      indexRelativeToCurrentPage\n    });\n\n    rowClassName = rootProps.getRowClassName(rowParams);\n  }\n\n  const cells = [];\n\n  for (let i = 0; i < renderedColumns.length; i += 1) {\n    const column = renderedColumns[i];\n    const indexRelativeToAllColumns = firstColumnToRender + i;\n    const isLastColumn = indexRelativeToAllColumns === visibleColumns.length - 1;\n    const removeLastBorderRight = isLastColumn && hasScrollX && !hasScrollY;\n    const showRightBorder = !isLastColumn ? rootProps.showCellRightBorder : !removeLastBorderRight && rootProps.disableExtendRowFullWidth;\n    const cellParams = apiRef.current.getCellParams(rowId, column.field);\n    const classNames = [];\n\n    if (column.cellClassName) {\n      classNames.push(clsx(typeof column.cellClassName === 'function' ? column.cellClassName(cellParams) : column.cellClassName));\n    }\n\n    const editCellState = editRowsState[rowId] ? editRowsState[rowId][column.field] : null;\n    let content = null;\n\n    if (editCellState == null && column.renderCell) {\n      var _rootProps$classes;\n\n      content = column.renderCell(_extends({}, cellParams, {\n        api: apiRef.current\n      })); // TODO move to GridCell\n\n      classNames.push(clsx(gridClasses['cell--withRenderer'], (_rootProps$classes = rootProps.classes) == null ? void 0 : _rootProps$classes['cell--withRenderer']));\n    }\n\n    if (editCellState != null && column.renderEditCell) {\n      var _rootProps$classes2;\n\n      let updatedRow = row;\n\n      if (apiRef.current.unstable_getRowWithUpdatedValues) {\n        // Only the new editing API has this method\n        updatedRow = apiRef.current.unstable_getRowWithUpdatedValues(rowId, column.field);\n      }\n\n      const params = _extends({}, cellParams, {\n        row: updatedRow\n      }, editCellState, {\n        api: apiRef.current\n      });\n\n      content = column.renderEditCell(params); // TODO move to GridCell\n\n      classNames.push(clsx(gridClasses['cell--editing'], (_rootProps$classes2 = rootProps.classes) == null ? void 0 : _rootProps$classes2['cell--editing']));\n    }\n\n    if (rootProps.getCellClassName) {\n      // TODO move to GridCell\n      classNames.push(rootProps.getCellClassName(cellParams));\n    }\n\n    const hasFocus = cellFocus !== null && cellFocus.id === rowId && cellFocus.field === column.field;\n    const tabIndex = cellTabIndex !== null && cellTabIndex.id === rowId && cellTabIndex.field === column.field && cellParams.cellMode === 'view' ? 0 : -1;\n    const cellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, indexRelativeToAllColumns);\n\n    if (cellColSpanInfo && !cellColSpanInfo.spannedByColSpan) {\n      var _rootProps$components;\n\n      const {\n        colSpan,\n        width\n      } = cellColSpanInfo.cellProps;\n      cells.push( /*#__PURE__*/_jsx(rootProps.components.Cell, _extends({\n        value: cellParams.value,\n        field: column.field,\n        width: width,\n        rowId: rowId,\n        height: rowHeight,\n        showRightBorder: showRightBorder,\n        formattedValue: cellParams.formattedValue,\n        align: column.align || 'left',\n        cellMode: cellParams.cellMode,\n        colIndex: indexRelativeToAllColumns,\n        isEditable: cellParams.isEditable,\n        hasFocus: hasFocus,\n        tabIndex: tabIndex,\n        className: clsx(classNames),\n        colSpan: colSpan\n      }, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.cell, {\n        children: content\n      }), column.field));\n    }\n  }\n\n  const emptyCellWidth = containerWidth - columnsTotalWidth;\n  return /*#__PURE__*/_jsxs(\"div\", _extends({\n    \"data-id\": rowId,\n    \"data-rowindex\": index,\n    role: \"row\",\n    className: clsx(rowClassName, classes.root, className),\n    \"aria-rowindex\": ariaRowIndex,\n    \"aria-selected\": selected,\n    style: style,\n    onClick: publishClick,\n    onDoubleClick: publish('rowDoubleClick', onDoubleClick),\n    onMouseEnter: publish('rowMouseEnter', onMouseEnter),\n    onMouseLeave: publish('rowMouseLeave', onMouseLeave)\n  }, other, {\n    children: [cells, emptyCellWidth > 0 && /*#__PURE__*/_jsx(EmptyCell, {\n      width: emptyCellWidth,\n      height: rowHeight\n    })]\n  }));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? GridRow.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  cellFocus: PropTypes.object,\n  cellTabIndex: PropTypes.object,\n  containerWidth: PropTypes.number.isRequired,\n  editRowsState: PropTypes.object.isRequired,\n  firstColumnToRender: PropTypes.number.isRequired,\n\n  /**\n   * Index of the row in the whole sorted and filtered dataset.\n   * If some rows above have expanded children, this index also take those children into account.\n   */\n  index: PropTypes.number.isRequired,\n  isLastVisible: PropTypes.bool,\n  lastColumnToRender: PropTypes.number.isRequired,\n  renderedColumns: PropTypes.arrayOf(PropTypes.object).isRequired,\n  row: PropTypes.any.isRequired,\n  rowHeight: PropTypes.number.isRequired,\n  rowId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n  selected: PropTypes.bool.isRequired,\n  visibleColumns: PropTypes.arrayOf(PropTypes.object).isRequired\n} : void 0;\nexport { GridRow };","map":{"version":3,"sources":["C:/Users/plane/OneDrive/Desktop/git/Frontend/Frontend_react/node_modules/@mui/x-data-grid/components/GridRow.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","clsx","unstable_composeClasses","composeClasses","GridEditModes","GridRowModes","GridCellModes","useGridApiContext","getDataGridUtilityClass","gridClasses","useGridRootProps","gridColumnsTotalWidthSelector","useGridSelector","useGridVisibleRows","findParentElementFromClassName","GRID_CHECKBOX_SELECTION_COL_DEF","GRID_ACTIONS_COLUMN_TYPE","GRID_DETAIL_PANEL_TOGGLE_FIELD","jsx","_jsx","jsxs","_jsxs","useUtilityClasses","ownerState","editable","editing","selected","isLastVisible","classes","slots","root","EmptyCell","width","height","style","className","GridRow","props","_apiRef$current$getRo","rowId","row","index","styleProp","rowHeight","visibleColumns","renderedColumns","containerWidth","firstColumnToRender","cellFocus","cellTabIndex","editRowsState","onClick","onDoubleClick","onMouseEnter","onMouseLeave","other","ariaRowIndex","apiRef","rootProps","currentPage","columnsTotalWidth","hasScrollX","hasScrollY","current","getRootDimensions","getRowMode","Edit","editMode","Row","publish","useCallback","eventName","propHandler","event","target","nodeType","currentTarget","contains","getRow","publishEvent","getRowParams","publishClick","cell","field","getAttribute","getCellMode","column","getColumn","type","maxHeight","minHeight","sizes","unstable_getRowInternalSizes","spacingTop","property","rowSpacingType","spacingBottom","rowClassName","getRowClassName","indexRelativeToCurrentPage","range","firstRowIndex","rowParams","isFirstVisible","rows","length","cells","i","indexRelativeToAllColumns","isLastColumn","removeLastBorderRight","showRightBorder","showCellRightBorder","disableExtendRowFullWidth","cellParams","getCellParams","classNames","cellClassName","push","editCellState","content","renderCell","_rootProps$classes","api","renderEditCell","_rootProps$classes2","updatedRow","unstable_getRowWithUpdatedValues","params","getCellClassName","hasFocus","id","tabIndex","cellMode","cellColSpanInfo","unstable_getCellColSpanInfo","spannedByColSpan","_rootProps$components","colSpan","cellProps","components","Cell","value","formattedValue","align","colIndex","isEditable","componentsProps","children","emptyCellWidth","role","process","env","NODE_ENV","propTypes","object","number","isRequired","bool","lastColumnToRender","arrayOf","any","oneOfType","string"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"selected\", \"rowId\", \"row\", \"index\", \"style\", \"rowHeight\", \"className\", \"visibleColumns\", \"renderedColumns\", \"containerWidth\", \"firstColumnToRender\", \"lastColumnToRender\", \"cellFocus\", \"cellTabIndex\", \"editRowsState\", \"isLastVisible\", \"onClick\", \"onDoubleClick\", \"onMouseEnter\", \"onMouseLeave\"];\n\n/* eslint-disable jsx-a11y/click-events-have-key-events */\n\n/* eslint-disable jsx-a11y/interactive-supports-focus */\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/material';\nimport { GridEditModes, GridRowModes, GridCellModes } from '../models/gridEditRowModel';\nimport { useGridApiContext } from '../hooks/utils/useGridApiContext';\nimport { getDataGridUtilityClass, gridClasses } from '../constants/gridClasses';\nimport { useGridRootProps } from '../hooks/utils/useGridRootProps';\nimport { gridColumnsTotalWidthSelector } from '../hooks/features/columns/gridColumnsSelector';\nimport { useGridSelector } from '../hooks/utils/useGridSelector';\nimport { useGridVisibleRows } from '../hooks/utils/useGridVisibleRows';\nimport { findParentElementFromClassName } from '../utils/domUtils';\nimport { GRID_CHECKBOX_SELECTION_COL_DEF } from '../colDef/gridCheckboxSelectionColDef';\nimport { GRID_ACTIONS_COLUMN_TYPE } from '../colDef/gridActionsColDef';\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD } from '../constants/gridDetailPanelToggleField';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    editable,\n    editing,\n    selected,\n    isLastVisible,\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['row', selected && 'selected', editable && 'row--editable', editing && 'row--editing', isLastVisible && 'row--lastVisible']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\n\nconst EmptyCell = ({\n  width,\n  height\n}) => {\n  if (!width || !height) {\n    return null;\n  }\n\n  const style = {\n    width,\n    height\n  };\n  return /*#__PURE__*/_jsx(\"div\", {\n    className: \"MuiDataGrid-cell\",\n    style: style\n  }); // TODO change to .MuiDataGrid-emptyCell or .MuiDataGrid-rowFiller\n};\n\nfunction GridRow(props) {\n  var _apiRef$current$getRo;\n\n  const {\n    selected,\n    rowId,\n    row,\n    index,\n    style: styleProp,\n    rowHeight,\n    className,\n    visibleColumns,\n    renderedColumns,\n    containerWidth,\n    firstColumnToRender,\n    cellFocus,\n    cellTabIndex,\n    editRowsState,\n    isLastVisible = false,\n    onClick,\n    onDoubleClick,\n    onMouseEnter,\n    onMouseLeave\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const ariaRowIndex = index + 2; // 1 for the header row and 1 as it's 1-based\n\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const currentPage = useGridVisibleRows(apiRef, rootProps);\n  const columnsTotalWidth = useGridSelector(apiRef, gridColumnsTotalWidthSelector);\n  const {\n    hasScrollX,\n    hasScrollY\n  } = (_apiRef$current$getRo = apiRef.current.getRootDimensions()) != null ? _apiRef$current$getRo : {\n    hasScrollX: false,\n    hasScrollY: false\n  };\n  const ownerState = {\n    selected,\n    isLastVisible,\n    classes: rootProps.classes,\n    editing: apiRef.current.getRowMode(rowId) === GridRowModes.Edit,\n    editable: rootProps.editMode === GridEditModes.Row\n  };\n  const classes = useUtilityClasses(ownerState);\n  const publish = React.useCallback((eventName, propHandler) => event => {\n    // Ignore portal\n    // The target is not an element when triggered by a Select inside the cell\n    // See https://github.com/mui/material-ui/issues/10534\n    if (event.target.nodeType === 1 && !event.currentTarget.contains(event.target)) {\n      return;\n    } // The row might have been deleted\n\n\n    if (!apiRef.current.getRow(rowId)) {\n      return;\n    }\n\n    apiRef.current.publishEvent(eventName, apiRef.current.getRowParams(rowId), event);\n\n    if (propHandler) {\n      propHandler(event);\n    }\n  }, [apiRef, rowId]);\n  const publishClick = React.useCallback(event => {\n    const cell = findParentElementFromClassName(event.target, gridClasses.cell);\n    const field = cell == null ? void 0 : cell.getAttribute('data-field'); // Check if the field is available because the cell that fills the empty\n    // space of the row has no field.\n\n    if (field) {\n      // User clicked in the checkbox added by checkboxSelection\n      if (field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n        return;\n      } // User opened a detail panel\n\n\n      if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n        return;\n      } // User reorders a row\n\n\n      if (field === '__reorder__') {\n        return;\n      } // User is editing a cell\n\n\n      if (apiRef.current.getCellMode(rowId, field) === GridCellModes.Edit) {\n        return;\n      } // User clicked a button from the \"actions\" column type\n\n\n      const column = apiRef.current.getColumn(field);\n\n      if (column.type === GRID_ACTIONS_COLUMN_TYPE) {\n        return;\n      }\n    }\n\n    publish('rowClick', onClick)(event);\n  }, [apiRef, onClick, publish, rowId]);\n\n  const style = _extends({}, styleProp, {\n    maxHeight: rowHeight,\n    minHeight: rowHeight\n  });\n\n  const sizes = apiRef.current.unstable_getRowInternalSizes(rowId);\n\n  if (sizes != null && sizes.spacingTop) {\n    const property = rootProps.rowSpacingType === 'border' ? 'borderTopWidth' : 'marginTop';\n    style[property] = sizes.spacingTop;\n  }\n\n  if (sizes != null && sizes.spacingBottom) {\n    const property = rootProps.rowSpacingType === 'border' ? 'borderBottomWidth' : 'marginBottom';\n    style[property] = sizes.spacingBottom;\n  }\n\n  let rowClassName = null;\n\n  if (typeof rootProps.getRowClassName === 'function') {\n    const indexRelativeToCurrentPage = index - currentPage.range.firstRowIndex;\n\n    const rowParams = _extends({}, apiRef.current.getRowParams(rowId), {\n      isFirstVisible: indexRelativeToCurrentPage === 0,\n      isLastVisible: indexRelativeToCurrentPage === currentPage.rows.length - 1,\n      indexRelativeToCurrentPage\n    });\n\n    rowClassName = rootProps.getRowClassName(rowParams);\n  }\n\n  const cells = [];\n\n  for (let i = 0; i < renderedColumns.length; i += 1) {\n    const column = renderedColumns[i];\n    const indexRelativeToAllColumns = firstColumnToRender + i;\n    const isLastColumn = indexRelativeToAllColumns === visibleColumns.length - 1;\n    const removeLastBorderRight = isLastColumn && hasScrollX && !hasScrollY;\n    const showRightBorder = !isLastColumn ? rootProps.showCellRightBorder : !removeLastBorderRight && rootProps.disableExtendRowFullWidth;\n    const cellParams = apiRef.current.getCellParams(rowId, column.field);\n    const classNames = [];\n\n    if (column.cellClassName) {\n      classNames.push(clsx(typeof column.cellClassName === 'function' ? column.cellClassName(cellParams) : column.cellClassName));\n    }\n\n    const editCellState = editRowsState[rowId] ? editRowsState[rowId][column.field] : null;\n    let content = null;\n\n    if (editCellState == null && column.renderCell) {\n      var _rootProps$classes;\n\n      content = column.renderCell(_extends({}, cellParams, {\n        api: apiRef.current\n      })); // TODO move to GridCell\n\n      classNames.push(clsx(gridClasses['cell--withRenderer'], (_rootProps$classes = rootProps.classes) == null ? void 0 : _rootProps$classes['cell--withRenderer']));\n    }\n\n    if (editCellState != null && column.renderEditCell) {\n      var _rootProps$classes2;\n\n      let updatedRow = row;\n\n      if (apiRef.current.unstable_getRowWithUpdatedValues) {\n        // Only the new editing API has this method\n        updatedRow = apiRef.current.unstable_getRowWithUpdatedValues(rowId, column.field);\n      }\n\n      const params = _extends({}, cellParams, {\n        row: updatedRow\n      }, editCellState, {\n        api: apiRef.current\n      });\n\n      content = column.renderEditCell(params); // TODO move to GridCell\n\n      classNames.push(clsx(gridClasses['cell--editing'], (_rootProps$classes2 = rootProps.classes) == null ? void 0 : _rootProps$classes2['cell--editing']));\n    }\n\n    if (rootProps.getCellClassName) {\n      // TODO move to GridCell\n      classNames.push(rootProps.getCellClassName(cellParams));\n    }\n\n    const hasFocus = cellFocus !== null && cellFocus.id === rowId && cellFocus.field === column.field;\n    const tabIndex = cellTabIndex !== null && cellTabIndex.id === rowId && cellTabIndex.field === column.field && cellParams.cellMode === 'view' ? 0 : -1;\n    const cellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, indexRelativeToAllColumns);\n\n    if (cellColSpanInfo && !cellColSpanInfo.spannedByColSpan) {\n      var _rootProps$components;\n\n      const {\n        colSpan,\n        width\n      } = cellColSpanInfo.cellProps;\n      cells.push( /*#__PURE__*/_jsx(rootProps.components.Cell, _extends({\n        value: cellParams.value,\n        field: column.field,\n        width: width,\n        rowId: rowId,\n        height: rowHeight,\n        showRightBorder: showRightBorder,\n        formattedValue: cellParams.formattedValue,\n        align: column.align || 'left',\n        cellMode: cellParams.cellMode,\n        colIndex: indexRelativeToAllColumns,\n        isEditable: cellParams.isEditable,\n        hasFocus: hasFocus,\n        tabIndex: tabIndex,\n        className: clsx(classNames),\n        colSpan: colSpan\n      }, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.cell, {\n        children: content\n      }), column.field));\n    }\n  }\n\n  const emptyCellWidth = containerWidth - columnsTotalWidth;\n  return /*#__PURE__*/_jsxs(\"div\", _extends({\n    \"data-id\": rowId,\n    \"data-rowindex\": index,\n    role: \"row\",\n    className: clsx(rowClassName, classes.root, className),\n    \"aria-rowindex\": ariaRowIndex,\n    \"aria-selected\": selected,\n    style: style,\n    onClick: publishClick,\n    onDoubleClick: publish('rowDoubleClick', onDoubleClick),\n    onMouseEnter: publish('rowMouseEnter', onMouseEnter),\n    onMouseLeave: publish('rowMouseLeave', onMouseLeave)\n  }, other, {\n    children: [cells, emptyCellWidth > 0 && /*#__PURE__*/_jsx(EmptyCell, {\n      width: emptyCellWidth,\n      height: rowHeight\n    })]\n  }));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? GridRow.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  cellFocus: PropTypes.object,\n  cellTabIndex: PropTypes.object,\n  containerWidth: PropTypes.number.isRequired,\n  editRowsState: PropTypes.object.isRequired,\n  firstColumnToRender: PropTypes.number.isRequired,\n\n  /**\n   * Index of the row in the whole sorted and filtered dataset.\n   * If some rows above have expanded children, this index also take those children into account.\n   */\n  index: PropTypes.number.isRequired,\n  isLastVisible: PropTypes.bool,\n  lastColumnToRender: PropTypes.number.isRequired,\n  renderedColumns: PropTypes.arrayOf(PropTypes.object).isRequired,\n  row: PropTypes.any.isRequired,\n  rowHeight: PropTypes.number.isRequired,\n  rowId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n  selected: PropTypes.bool.isRequired,\n  visibleColumns: PropTypes.arrayOf(PropTypes.object).isRequired\n} : void 0;\nexport { GridRow };"]},"metadata":{},"sourceType":"module"}